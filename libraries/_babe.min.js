const errors={contactEmail:`There is no contact_email given. Please give a contact_email to the babeInit function,\n\nfor example:\n\nbabeInit({\n    ...\n    deploy: {\n        ...\n        contact_email: 'yourcontactemail@email.sample',\n        ...\n    },\n    ...\n});`,prolificURL:`There is no prolificURL given. Please give a prolificURL to the babeInit function,\n\nfor example:\n\nbabeInit({\n    ...\n    deploy: {\n        ...\n        prolificURL: 'https://app.prolific.ac/submissions/complete?cc=SAMPLE',\n        ...\n    },\n    ...\n});`,noTrials:`No trials given. Each _babe view takes an object with an obligatory 'trial' property.\n\nfor example:\n\nvar introView = intro({\n    ...\n    trials: 1,\n    ...\n});\n\nYou can find more information at https://github.com/babe-project/babe-base#views-in-_babe`,noName:`No name given. Each _babe view takes an object with an obligatory 'name' property\n\nfor example:\n\nvar introView = intro({\n    ...\n    name: 'introView',\n    ...\n});\n\nYou can find more information at https://github.com/babe-project/babe-base#views-in-_babe`,noData:`No data given. Each _babe view takes an object with an obligatory 'data' property\n\nfor example:\n\nvar mainTrials = forcedChoice({\n    ...\n    data: my_main_trials,\n    ...\n});\n\nThe data is a list of objects defined in your local js file.\n\n_babe's trial views expect each trial object to have specific properties. Here is an example of a forcedCoice view trial:\n\n{\n    question: 'How are you today?',\n    option1: 'fine',\n    option2: 'good'\n}\n\nYou can find more information at https://github.com/babe-project/babe-base#views-in-_babe`,noTrialType:`No trial_type given. Each _babe view takes an object with an obligatory 'trial_type' property\n\nfor example:\n\nvar mainTrials = forcedChoice({\n    ...\n    trial_type: 'main trials',\n    ...\n});\n\nThe trial type is needed for recording the results of your experiment.\n\nYou can find more information at https://github.com/babe-project/babe-base#views-in-_babe`,notAnArray:`The data is not an array. Trial views get an array of objects.\n\nfor example:\n\nvar mainTrials = forcedChoice({\n    ...\n    data: [\n        {\n            prop: val,\n            prop: val\n        },\n        {\n            prop: val,\n            prop:val\n        }\n    ],\n    ...\n});`,noSuchViewName:`The view name listed in progress_bar.in does not exist. Use the view names to reference the views in progress_bar.in.\n\nfor example:\n\nvar mainView = forcedChoice({\n    ...\n    name: 'myMainView',\n    ...\n});\n\nvar introView = intro({\n    ...\n    name: 'intro',\n    ...\n});\n\nbabeInit({\n    ...\n    progress_bar: {\n        in: [\n            "myMainView"\n        ],\n        style: "chunks"\n        width: 100\n    },\n    ...\n});\n`};const babeInit=function(config){const babe={};babe.views_seq=_.flatten(config.views_seq);babe.currentViewCounter=0;babe.currentTrialCounter=0;babe.currentTrialInViewCounter=0;babe.progress_bar=config.progress_bar;babe.global_data={startDate:Date(),startTime:Date.now()};babe.trial_data=[];babe.deploy=config.deploy;babe.deploy.MTurk_server=babe.deploy.deployMethod=="MTurkSandbox"?"https://workersandbox.mturk.com/mturk/externalSubmit":babe.deploy.deployMethod=="MTurk"?"https://www.mturk.com/mturk/externalSubmit":"";babe.deploy.liveExperiment=babe.deploy.deployMethod!=="debug";babe.deploy.is_MTurk=babe.deploy.MTurk_server!=="";babe.deploy.submissionURL=babe.deploy.deployMethod=="localServer"?"http://localhost:4000/api/submit_experiment/"+babe.deploy.experimentID:babe.deploy.serverAppURL+babe.deploy.experimentID;const regex="/submit_experiment/";babe.deploy.checkExperimentURL=babe.deploy.submissionURL.replace(regex,"/check_experiment/");babe.progress=babeProgress(babe);babe.submission=babeSubmit(babe);babe.findNextView=function(){let currentView=babe.views_seq[babe.currentViewCounter];if(babe.currentTrialInViewCounter<currentView.trials){currentView.render(currentView.CT,babe)}else{babe.currentViewCounter++;currentView=babe.views_seq[babe.currentViewCounter];babe.currentTrialInViewCounter=0;if(currentView!==undefined){currentView.render(currentView.CT,babe)}else{$("#main").html(Mustache.render(`<div class='view'>\n                        <h1 class="title">Nothing more to show</h1>\n                    </div>`));return}}babe.currentTrialInViewCounter++;babe.currentTrialCounter++;currentView.CT++;if(currentView.hasProgressBar){babe.progress.update()}};(function(){if(babe.deploy.deployMethod==="MTurk"||babe.deploy.deployMethod==="MTurkSandbox"){console.info(`The experiment runs on MTurk (or MTurk's sandbox)\n----------------------------\n\nThe ID of your experiment is ${babe.deploy.experimentID}\n\nThe results will be submitted ${babe.deploy.submissionURL}\n\nand\n\nMTurk's server: ${babe.deploy.MTurk_server}`)}else if(babe.deploy.deployMethod==="Prolific"){console.info(`The experiment runs on Prolific\n-------------------------------\n\nThe ID of your experiment is ${babe.deploy.experimentID}\n\nThe results will be submitted to ${babe.deploy.submissionURL}\n\nwith\n\nProlific URL (must be the same as in the website): ${babe.deploy.prolificURL}`)}else if(babe.deploy.deployMethod==="directLink"){console.info(`The experiment uses Direct Link\n-------------------------------\n\nThe ID of your experiment is ${babe.deploy.experimentID}\n\nThe results will be submitted to ${babe.deploy.submissionURL}`)}else if(babe.deploy.deployMethod==="debug"){console.info(`The experiment is in Debug Mode\n-------------------------------\n\nThe results will be displayed in a table at the end of the experiment and available to download in CSV format.`)}else if(babe.deploy.deployMethod!=="localServer"){throw new Error(`There is no such deployMethod.\n\nPlease use 'debug', 'directLink', 'Mturk', 'MTurkSandbox', 'localServer' or 'Prolific'.\n\nThe deploy method you provided is '${babe.deploy.deployMethod}'.\n\nYou can find more information at https://github.com/babe-project/babe-base`)}if(babe.deploy.deployMethod==="Prolific"&&(babe.deploy.prolificURL===undefined||babe.deploy.prolificURL==="")){throw new Error(errors.prolificURL)}if(babe.deploy.contact_email===undefined||babe.deploy.contact_email===""){throw new Error(errors.contactEmail)}})();if(babe.deploy.deployMethod!=="debug"){$.ajax({type:"GET",url:babe.deploy.checkExperimentURL,crossDomain:true,success:function(responseData,textStatus,jqXHR){babe.progress.add();babe.findNextView()},error:function(jqXHR,textStatus,error){console.log(babe.deploy.checkExperimentURL);alert(`Sorry, there is an error communicating with our server and the experiment cannot proceed. Please return the HIT immediately and contact the author at ${babe.deploy.contact_email}. Please include the following error message: "${jqXHR.responseText}". Thank you for your understanding.`)}})}else{babe.progress.add();babe.findNextView()}};const babeProgress=function(babe){let totalProgressParts=0;let progressTrials=0;let totalProgressChunks=0;let filledChunks=0;let fillChunk=false;const progress={add:function(){babe.views_seq.map(view=>{for(let j=0;j<babe.progress_bar.in.length;j++){if(view.name===babe.progress_bar.in[j]){totalProgressChunks++;totalProgressParts+=view.trials;view.hasProgressBar=true}}})},update:function(){try{addToDOM()}catch(e){console.error(e.message)}const progressBars=$(".progress-bar");let div,filledPart;if(babe.progress_bar.style==="default"){div=$(".progress-bar").width()/totalProgressParts;filledPart=progressTrials*div}else{div=$(".progress-bar").width()/babe.views_seq[babe.currentViewCounter].trials;filledPart=(babe.currentTrialInViewCounter-1)*div}const filledElem=jQuery("<span/>",{id:"filled"}).appendTo(progressBars[filledChunks]);$("#filled").css("width",filledPart);progressTrials++;if(babe.progress_bar.style==="chunks"){if(fillChunk===true){filledChunks++;fillChunk=false}if(filledElem.width()===$(".progress-bar").width()-div){fillChunk=true}for(var i=0;i<filledChunks;i++){progressBars[i].style.backgroundColor="#5187BA"}}}};const addToDOM=function(){var bar;var i;var view=$(".view");var barWidth=babe.progress_bar.width;var clearfix=jQuery("<div/>",{class:"clearfix"});var container=jQuery("<div/>",{class:"progress-bar-container"});view.css("padding-top",30);view.prepend(clearfix);view.prepend(container);if(babe.progress_bar.style==="chunks"){for(i=0;i<totalProgressChunks;i++){bar=jQuery("<div/>",{class:"progress-bar"});bar.css("width",barWidth);container.append(bar)}}else if(babe.progress_bar.style==="separate"){bar=jQuery("<div/>",{class:"progress-bar"});bar.css("width",barWidth);container.append(bar)}else if(babe.progress_bar.style==="default"){bar=jQuery("<div/>",{class:"progress-bar"});bar.css("width",barWidth);container.append(bar)}else{throw new Error('Progress_bar.style can be set to "default", "separate" or "chunks" in experiment.js')}};return progress};function babeSubmit(babe){const submit={submit:function(babe){let data={experiment_id:babe.deploy.experimentID,trials:addEmptyColumns(babe.trial_data)};data=_.merge(babe.global_data,data);if(babe.deploy.is_MTurk){try{const HITData=getHITData();data["assignment_id"]=HITData["assignmentId"];data["worker_id"]=HITData["workerId"];data["hit_id"]=HITData["hitId"];var form=jQuery("<form/>",{id:"mturk-submission-form",action:config_deploy.MTurk_server}).appendTo(".thanks-templ");jQuery("<input/>",{type:"hidden",name:"data",value:JSON.stringify(data)}).appendTo(form);jQuery("<input/>",{type:"hidden",name:"assignmentId",value:HITData["assignmentId"]}).appendTo(form)}catch(e){console.error(e)}}if(babe.deploy.liveExperiment){console.log("submits");submitResults(babe.deploy.contact_email,babe.deploy.submissionURL,flattenData(data),babe.deploy)}else{const flattenedData=flattenData(data);$(".warning-message").addClass("nodisplay");jQuery("<h3/>",{text:"Debug Mode"}).appendTo($(".view"));jQuery("<div/>",{class:"debug-results",html:formatDebugData(flattenedData)}).appendTo($(".view"));createCSVForDownload(flattenedData)}}};function submitResults(contactEmail,submissionURL,data,config){contactEmail=typeof contactEmail!=="undefined"?contactEmail:"not provided";$.ajax({type:"POST",url:submissionURL,crossDomain:true,contentType:"application/json",data:JSON.stringify(data),success:function(responseData,textStatus,jqXHR){console.log(textStatus);$(".warning-message").addClass("nodisplay");$(".thanks-message").removeClass("nodisplay");$(".extra-message").removeClass("nodisplay");if(config.is_MTurk){setTimeout(function(){submitToMTurk(data),500})}},error:function(responseData,textStatus,errorThrown){if(config.is_MTurk){submitToMTurk(data);$(".thanks-message").removeClass("nodisplay")}else{if(textStatus=="timeout"){alert("Oops, the submission timed out. Please try again. If the problem persists, please contact "+contactEmail+", including your ID")}else{alert("Oops, the submission failed. The server says: "+responseData.responseText+"\nPlease try again. If the problem persists, please contact "+contactEmail+"with this error message, including your ID")}}}})}const submitToMTurk=function(){var form=$("#mturk-submission-form");form.submit()};const addEmptyColumns=function(trialData){var columns=[];for(var i=0;i<trialData.length;i++){for(var prop in trialData[i]){if(trialData[i].hasOwnProperty(prop)&&columns.indexOf(prop)===-1){columns.push(prop)}}}for(var j=0;j<trialData.length;j++){for(var k=0;k<columns.length;k++){if(!trialData[j].hasOwnProperty(columns[k])){trialData[j][columns[k]]="NA"}}}return trialData};const formatDebugData=function(flattenedData){var output="<table id='debugresults'>";var t=flattenedData[0];output+="<thead><tr>";for(var key in t){if(t.hasOwnProperty(key)){output+="<th>"+key+"</th>"}}output+="</tr></thead>";output+="<tbody><tr>";var entry="";for(var i=0;i<flattenedData.length;i++){var currentTrial=flattenedData[i];for(var k in t){if(currentTrial.hasOwnProperty(k)){entry=String(currentTrial[k]);output+="<td>"+entry.replace(/ /g,"&nbsp;")+"</td>"}}output+="</tr>"}output+="</tbody></table>";return output};const createCSVForDownload=function(flattenedData){var csvOutput="";var t=flattenedData[0];for(var key in t){if(t.hasOwnProperty(key)){csvOutput+='"'+String(key)+'",'}}csvOutput+="\n";for(var i=0;i<flattenedData.length;i++){var currentTrial=flattenedData[i];for(var k in t){if(currentTrial.hasOwnProperty(k)){csvOutput+='"'+String(currentTrial[k])+'",'}}csvOutput+="\n"}var blob=new Blob([csvOutput],{type:"text/csv"});if(window.navigator.msSaveOrOpenBlob){window.navigator.msSaveBlob(blob,"results.csv")}else{jQuery("<a/>",{class:"button download-btn",html:"Download the results as CSV",href:window.URL.createObjectURL(blob),download:"results.csv"}).appendTo($(".view"))}};const flattenData=function(data){var trials=data.trials;delete data.trials;var sample_trial=trials[0];for(var trial_key in sample_trial){if(sample_trial.hasOwnProperty(trial_key)){if(data.hasOwnProperty(trial_key)){var new_data_key="glb_"+trial_key;data[new_data_key]=data[trial_key];delete data[trial_key]}}}var out=_.map(trials,function(t){return _.merge(t,data)});return out};const getHITData=function(){const url=window.location.href;const qArray=url.split("?");const HITData={};if(qArray[1]===undefined){throw new Error("Cannot get participant' s assignmentId from the URL (happens if the experiment does NOT run on MTurk or MTurkSandbox).")}else{qArray=qArray[1].split("&");for(var i=0;i<qArray.length;i++){HITData[qArray[i].split("=")[0]]=qArray[i].split("=")[1]}}return HITData};return submit}function loop(arr,count,shuffleFlag){return _.flatMapDeep(_.range(count),function(i){return arr})}function loopShuffled(arr,count){return _.flatMapDeep(_.range(count),function(i){return _.shuffle(arr)})}const babeViews={intro:function(config){paramsChecker(config,"intro");const intro={name:config.name,title:config.title,text:config.text,buttonText:config.buttonText,render:function(CT,babe){const viewTemplate=`<div class='view'>\n                    {{# title }}\n                    <h1 class="title">{{ title }}</h1>\n                    {{/ title }}\n                    {{# text }}\n                    <section class="text-container">\n                    <p class="text">{{{ text }}}</p>\n                    </section>\n                    {{/ text }}\n                    <p id="prolific-id-form">\n                        <label for="prolific-id">Please, enter your Prolific ID</label>\n                        <input type="text" id="prolific-id" />\n                    </p>\n                    {{# button }}\n                    <button id="next" class="nodisplay">{{ button }}</button>\n                    {{/ button }}\n                    {{^ button }}\n                    <button id="next" class="nodisplay">Begin Experiment</button>\n                    {{/ button }}\n                </div>`;$("#main").html(Mustache.render(viewTemplate,{title:this.title,text:this.text,button:this.buttonText}));const prolificId=$("#prolific-id");const IDform=$("#prolific-id-form");const next=$("#next");function showNextBtn(){if(prolificId.val().trim()!==""){next.removeClass("nodisplay")}else{next.addClass("nodisplay")}}if(babe.deploy.deployMethod!=="Prolific"){IDform.addClass("nodisplay");next.removeClass("nodisplay")}prolificId.on("keyup",function(){showNextBtn()});prolificId.on("focus",function(){showNextBtn()});next.on("click",function(){if(babe.deploy.deployMethod==="Prolific"){babe.global_data.prolific_id=prolificId.val().trim()}babe.findNextView()})},CT:0,trials:config.trials};return intro},instructions:function(config){paramsChecker(config,"instructions");const instructions={name:config.name,title:config.title,text:config.text,buttonText:config.buttonText,render:function(CT,babe){const viewTemplate=`<div class="view">\n                    {{# title }}\n                    <h1>{{ title }}</h1>\n                    {{/ title }}\n                    {{# text }}\n                    <section class="text-container">\n                        <p class="text">{{ text }}</p>\n                    </section>\n                    {{/ text }}\n                    {{# button }}\n                    <button id="next">{{ button }}</button>\n                    {{/ button }}\n                </div>`;$("#main").html(Mustache.render(viewTemplate,{title:this.title,text:this.text,button:this.buttonText}));$("#next").on("click",function(){babe.findNextView()})},CT:0,trials:config.trials};return instructions},begin:function(config){paramsChecker(config,"begin experiment");const begin={name:config.name,text:config.text,render:function(CT,babe){const viewTemplate=`<div class="view">\n                    {{# text }}\n                    <section class="text-container">\n                        <p class="text">{{ text }}</p>\n                    </section>\n                    {{/ text }}\n                    <button id="next">Begin Experiment</button>\n                </div>`;$("#main").html(Mustache.render(viewTemplate,{title:this.title,text:this.text}));$("#next").on("click",function(e){babe.findNextView()})},CT:0,trials:config.trials};return begin},forcedChoice:function(config){checkTrialView(config,"forced choice");paramsChecker(config,"forced choice");const forcedChoice={name:config.name,render:function(CT,babe){const viewTemplate=`<div class="view">\n                    <div class="picture", align = "center">\n                        <img src={{picture}} alt="a picture" height="100" width="100">\n                    </div>\n                    <p class="question">\n                    {{# question }}\n                    {{ question }}\n                    {{/ question }}\n                    </p>\n                    <p class="answer-container buttons-container">\n                        <label for="yes" class="button-answer">{{ option1 }}</label>\n                        <input type="radio" name="answer" id="yes" value={{ option1 }} />\n                        <input type="radio" name="answer" id="no" value={{ option2 }} />\n                        <label for="no" class="button-answer">{{option2}}</label>\n                    </p>\n                </div>`;$("#main").html(Mustache.render(viewTemplate,{question:config.data[CT].question,option1:config.data[CT].option1,option2:config.data[CT].option2,picture:config.data[CT].picture}));const startingTime=Date.now();$("input[name=answer]").on("change",function(){const RT=Date.now()-startingTime;const trial_data={trial_type:config.trial_type,trial_number:CT+1,question:config.data[CT].question,option1:config.data[CT].option1,option2:config.data[CT].option2,option_chosen:$("input[name=answer]:checked").val(),RT:RT};babe.trial_data.push(trial_data);babe.findNextView()})},CT:0,trials:config.trials};return forcedChoice},sliderRating:function(config){checkTrialView(config,"slider rating");paramsChecker(config,"slider rating");const sliderRating={name:config.name,render:function(CT,babe){const viewTemplate=`<div class="view">\n                    <div class="picture", align = "center">\n                        <img src={{ picture }} alt="a picture" height="100" width="100">\n                    </div>\n                    <p class="question">\n                    {{# question }}\n                    {{ question }}\n                    {{/ question }}\n                    </p>\n                    <p class="answer-container slider-container">\n                        <span class="unnatural">{{ option1 }}</span>\n                        <input type="range" id="response" class="slider-response" min="0" max="100" value="50"/>\n                        <span class="natural">{{ option2 }}</span>\n                    </p>\n                    <button id="next" class="nodisplay">Next</button>\n                </div>`;let response;$("#main").html(Mustache.render(viewTemplate,{question:config.data[CT].question,option1:config.data[CT].option1,option2:config.data[CT].option2,picture:config.data[CT].picture}));const startingTime=Date.now();response=$("#response");response.on("change",function(){$("#next").removeClass("nodisplay")});response.on("click",function(){$("#next").removeClass("nodisplay")});$("#next").on("click",function(){const RT=Date.now()-startingTime;const trial_data={trial_type:config.trial_type,trial_number:CT+1,question:config.data[CT].question,option1:config.data[CT].option1,option2:config.data[CT].option2,rating_slider:response.val(),RT:RT};babe.trial_data.push(trial_data);babe.findNextView()})},CT:0,trials:config.trials};return sliderRating},textboxInput:function(config){checkTrialView(config,"textbox input");paramsChecker(config,"textbox input");const textboxInput={name:config.name,render:function(CT,babe){const viewTemplate=`<div class="view">\n                    <p class="question">\n                    {{# question }}\n                    {{/ question }}\n                    {{ question }}\n                    </p>\n                    {{# picture }}\n                    <div class="picture", align = "center">\n                        <img src={{ picture }} alt="picture" height="100" width="100">\n                    </div>\n                    {{/ picture }}\n                    <p class="answer-container">\n                        <textarea name="textbox-input" rows=10 cols=50 class="textbox-input" />\n                    </p>\n                    <button id="next" class="nodisplay">next</button>\n                </div>`;$("#main").html(Mustache.render(viewTemplate,{question:config.data[CT].question,picture:config.data[CT].picture}));const next=$("#next");const textInput=$("textarea");const startingTime=Date.now();textInput.on("keyup",function(){if(textInput.val().trim().length>10){next.removeClass("nodisplay")}else{next.addClass("nodisplay")}});next.on("click",function(){var RT=Date.now()-startingTime;var trial_data={trial_type:config.trial_type,trial_number:CT+1,question:config.data[CT].question,text_input:textInput.val().trim(),RT:RT};babe.trial_data.push(trial_data);babe.findNextView()})},CT:0,trials:config.trials};return textboxInput},dropdownChoice:function(config){checkTrialView(config,"dropdown choice");paramsChecker(config,"dropdown choice");const dropdownChoice={name:config.name,render:function(CT,babe){const viewTemplate=`<div class="view">\n                    <div class="picture", align = "center">\n                        <img src={{ picture }} alt="a picture" height="100" width="100">\n                    </div>\n\n                    {{# question }}\n                    <p class="answer-container dropdown-container">\n                        <p class="question">\n                        {{ question }}\n                        <select id="response" name="answer">\n                            <option disabled selected></option>\n                            <option value={{ option1 }}>{{ option1 }}</option>\n                            <option value={{ option2 }}>{{ option2 }}</option>\n                        </select>\n                        </p>\n                        <button id="next" class="nodisplay">Next</button>\n                    </p>\n                    {{/ question }}\n                    {{# questionLeftPart }}\n                    <p class="answer-container dropdown-container">\n                        <p class="question">\n                        {{ questionLeftPart }}\n                        <select id="response" name="answer">\n                            <option disabled selected></option>\n                            <option value={{ option1 }}>{{ option1 }}</option>\n                            <option value={{ option2 }}>{{ option2 }}</option>\n                        </select>\n                        {{ questionRightPart }}\n                        </p>\n                        <button id="next" class="nodisplay">Next</button>\n                    </p>\n                    {{/ questionLeftPart }}\n                </div>`;let response;$("#main").html(Mustache.render(viewTemplate,{question:config.data[CT].question,questionLeftPart:config.data[CT].questionLeftPart,questionRightPart:config.data[CT].questionRightPart,option1:config.data[CT].option1,option2:config.data[CT].option2,picture:config.data[CT].picture}));const startingTime=Date.now();response=$("#response");response.on("change",function(){$("#next").removeClass("nodisplay")});$("#next").on("click",function(){const RT=Date.now()-startingTime;const trial_data={trial_type:config.trial_type,trial_number:CT+1,question:config.data[CT].question,option1:config.data[CT].option1,option2:config.data[CT].option2,dropdown_choice:$(response).val(),RT:RT};babe.trial_data.push(trial_data);babe.findNextView()})},CT:0,trials:config.trials};return dropdownChoice},ratingScale:function(config){checkTrialView(config,"rating scale");paramsChecker(config,"rating scale");const ratingScale={name:config.name,render:function(CT,babe){const viewTemplate=`<div class="view">\n                    {{# picture }}\n                    <div class="picture", align = "center">\n                        <img src={{ picture }} alt="picture" height="100" width="100">\n                    </div>\n                    {{/ picture }}\n\n                    <p class="question">\n                    {{# question }}\n                    {{ question }}\n                    {{/ question }}\n                    </p>\n\n                    <p class="answer-container buttons-container">\n                        <strong>{{ option1 }}</strong>\n                        <label for="1" class="rating-answer">1</label>\n                        <input type="radio" name="answer" id="1" value="1" />\n                        <label for="2" class="rating-answer">2</label>\n                        <input type="radio" name="answer" id="2" value="2" />\n                        <label for="3" class="rating-answer">3</label>\n                        <input type="radio" name="answer" id="3" value="3" />\n                        <label for="4" class="rating-answer">4</label>\n                        <input type="radio" name="answer" id="4" value="4" />\n                        <label for="5" class="rating-answer">5</label>\n                        <input type="radio" name="answer" id="5" value="5" />\n                        <label for="6" class="rating-answer">6</label>\n                        <input type="radio" name="answer" id="6" value="6" />\n                        <label for="7" class="rating-answer">7</label>\n                        <input type="radio" name="answer" id="7" value="7" />\n                        <strong>{{ option2 }}</strong>\n                    </p>\n                </div>`;$("#main").html(Mustache.render(viewTemplate,{question:config.data[CT].question,option1:config.data[CT].option1,option2:config.data[CT].option2,picture:config.data[CT].picture}));const startingTime=Date.now();$("input[name=answer]").on("change",function(){const RT=Date.now()-startingTime;const trial_data={trial_type:config.trial_type,trial_number:CT+1,question:config.data[CT].question,option1:config.data[CT].option1,option2:config.data[CT].option2,option_chosen:$("input[name=answer]:checked").val(),RT:RT};babe.trial_data.push(trial_data);babe.findNextView()})},CT:0,trials:config.trials};return ratingScale},sentenceChoice:function(config){checkTrialView(config,"sentence choice");paramsChecker(config,"sentence choice");const sentenceChoice={name:config.name,render:function(CT,babe){var viewTemplate=`<div class="view">\n                    {{# picture }}\n                    <div class="picture" align = "center">\n                        <img src={{ picture }} alt="picture" height="100" width="100">\n                    </div>\n                    {{/ picture }}\n\n                    <p class="question">\n                    {{# question }}\n                    {{ question }}\n                    {{/ question }}\n                    </p>\n\n                    <p class="answer-container buttons-container">\n                        <label for="1" class="sentence-selection">{{ option1 }}</label>\n                        <input type="radio" name="answer" id="1" value="{{ option1 }}"/>\n                        <label for="2" class="sentence-selection">{{ option2 }}</label>\n                        <input type="radio" name="answer" id="2" value="{{ option2 }}"/>\n                    </p>\n                </div>`;$("#main").html(Mustache.render(viewTemplate,{question:config.data[CT].question,option1:config.data[CT].option1,option2:config.data[CT].option2,picture:config.data[CT].picture}));var startingTime=Date.now();$("input[name=answer]").on("change",function(){var RT=Date.now()-startingTime;var trial_data={trial_type:config.trial_type,trial_number:CT+1,question:config.data[CT].question,option1:config.data[CT].option1,option2:config.data[CT].option2,option_chosen:$("input[name=answer]:checked").val(),RT:RT};babe.trial_data.push(trial_data);babe.findNextView()})},CT:0,trials:config.trials};return sentenceChoice},imageSelection:function(config){checkTrialView(config,"image selection");paramsChecker(config,"image selection");const imageSelection={name:config.name,render:function(CT,babe){const viewTemplate=`<div class="view">\n                    <p class="question">\n                    {{# question }}\n                    {{ question }}\n                    {{/ question }}\n                    </p>\n\n                    <p class="answer-container imgs-container">\n                        <label for="img1" class="img-answer"><img src={{ picture1 }} alt="picture" height="100" width="100"></label>\n                        <input type="radio" name="answer" id="img1" value={{  option1 }} />\n                        <input type="radio" name="answer" id="img2" value={{ option2 }} />\n                        <label for="img2" class="img-answer"><img src={{ picture2 }} alt="picture" height="100" width="100"></label>\n                    </p>\n                </div>`;$("#main").html(Mustache.render(viewTemplate,{question:config.data[CT].question,option1:config.data[CT].option1,option2:config.data[CT].option2,picture1:config.data[CT].picture1,picture2:config.data[CT].picture2}));const startingTime=Date.now();$("input[name=answer]").on("change",function(){const RT=Date.now()-startingTime;const trial_data={trial_type:config.trial_type,trial_number:CT+1,question:config.data[CT].question,option1:config.data[CT].option1,option2:config.data[CT].option2,picture1:config.data[CT].picture1,picture2:config.data[CT].picture2,image_selected:$("input[name=answer]:checked").val(),RT:RT};babe.trial_data.push(trial_data);babe.findNextView()})},CT:0,trials:config.trials};return imageSelection},keyPress:function(config){checkTrialView(config,"key press");paramsChecker(config,"key press");const keyPress={name:config.name,render:function(CT,babe){const viewTemplate=`<div class="view">\n                    <h3>{{ key1 }} = {{ value1 }}, {{ key2 }} = {{ value2 }}</h3>\n                    <p class="question">\n                    {{# question }}\n                    {{/ question }}\n                    {{ question }}\n                    </p>\n                    {{# picture }}\n                    <div class="picture", align = "center">\n                        <img src={{ picture }} alt="picture" height="100" width="100">\n                    </div>\n                    {{/ picture }}\n                </div>`;const key1=config.data[CT].key1;const key2=config.data[CT].key2;$("#main").html(Mustache.render(viewTemplate,{question:config.data[CT].question,picture:config.data[CT].picture,key1:key1,key2:key2,value1:config.data[CT][key1],value2:config.data[CT][key2]}));const startingTime=Date.now();function handleKeyPress(e){const keyPressed=String.fromCharCode(e.which).toLowerCase();if(keyPressed===key1||keyPressed===key2){let correctness;const RT=Date.now()-startingTime;if(config.data[CT].expected===config.data[CT][keyPressed.toLowerCase()]){correctness="correct"}else{correctness="incorrect"}const trial_data={trial_type:config.trial_type,trial_number:CT+1,question:config.data[CT].question,expected:config.data[CT].expected,key_pressed:keyPressed,correctness:correctness,RT:RT};trial_data["key1"]=config.data[CT][key1];trial_data["key2"]=config.data[CT][key2];if(config.data[CT].picture!==undefined){trial_data["picture"]=config.data[CT].picture}if(config.data[CT].question!==undefined){trial_data["question"]=config.data[CT].question}babe.trial_data.push(trial_data);$("body").off("keydown",handleKeyPress);babe.findNextView()}}$("body").on("keydown",handleKeyPress)},CT:0,trials:config.trials};return keyPress},postTest:function(config){paramsChecker(config,"post test");const postTest={name:config.name,title:config.title,text:config.text,buttonText:config.buttonText,render:function(CT,babe){const viewTemplate=`<div class="view post-test-templ">\n                    {{# title }}\n                    <h1>{{ title }}</h1>\n                    {{/ title }}\n                    {{# text }}\n                    <section class="text-container">\n                        <p class="text">{{ text }}</p>\n                    </section>\n                    {{/ text }}\n                    <form>\n                        <p>\n                            <label for="age">Age:</label>\n                            <input type="number" name="age" min="18" max="110" id="age" />\n                        </p>\n                        <p>\n                            <label for="gender">Gender:</label>\n                            <select id="gender" name="gender">\n                                <option></option>\n                                <option value="male">male</option>\n                                <option value="female">female</option>\n                                <option value="other">other</option>\n                            </select>\n                        </p>\n                        <p>\n                            <label for="education">Level of Education:</label>\n                            <select id="education" name="education">\n                                <option></option>\n                                <option value="graduated_high_school">Graduated High School</option>\n                                <option value="graduated_college">Graduated College</option>\n                                <option value="higher_degree">Higher Degree</option>\n                            </select>\n                        </p>\n                        <p>\n                            <label for="languages" name="languages">Native Languages: <br /><span>(i.e. the language(s) spoken at home when you were a child)</</span></label>\n                            <input type="text" id="languages"/>\n                        </p>\n                        <p class="comment-sect">\n                            <label for="comments">Further comments</label>\n                            <textarea name="comments" id="comments"\n                            rows="6" cols="40"></textarea>\n                        </p>\n                        {{# buttonText }}\n                        <button id="next">{{ buttonText }}</button>\n                        {{/ buttonText }}\n                        {{^ buttonText }}\n                        <button id="next">Next</button>\n                        {{/ buttonText }}\n                    </form>\n                </div>`;$("#main").html(Mustache.render(viewTemplate,{title:this.title,text:this.text,buttonText:this.buttonText}));$("#next").on("click",function(e){e.preventDefault();babe.global_data.age=$("#age").val();babe.global_data.gender=$("#gender").val();babe.global_data.education=$("#education").val();babe.global_data.languages=$("#languages").val();babe.global_data.comments=$("#comments").val().trim();babe.global_data.endTime=Date.now();babe.global_data.timeSpent=(babe.global_data.endTime-babe.global_data.startTime)/6e4;babe.findNextView()})},CT:0,trials:config.trials};return postTest},thanks:function(config){paramsChecker(config,"thanks");const thanks={name:config.name,message:config.title,render:function(CT,babe){var viewTemplate=`<div class="view thanks-templ">\n                    <h4 class="warning-message">submitting the data\n                        <div class="loader"></div>\n                    </h4>\n                    {{# thanksMessage }}\n                    <h1 class="thanks-message nodisplay">{{ thanksMessage }}</h1>\n                    {{/ thanksMessage }}\n                    {{^ thanksMessage }}\n                    <h1 class="thanks-message nodisplay">Thank you for taking part in this experiment!</h1>\n                    {{/ thanksMessage }}\n                    {{# extraMessage }}\n                    <h2 class="extra-message nodisplay">{{{ extraMessage }}}</h2>\n                    {{/ extraMessage }}\n                </div>`;if(babe.deploy.is_MTurk||babe.deploy.deployMethod==="directLink"){$("#main").html(Mustache.render(viewTemplate,{thanksMessage:this.message}))}else if(babe.deploy.deployMethod==="Prolific"){$("main").html(Mustache.render(viewTemplate,{thanksMessage:this.message,extraMessage:"Please press the button below to confirm that you completed the experiment with Prolific<br />".concat("<a href=",babe.deploy.prolificURL,' class="prolific-url">Confirm</a>')}))}else if(babe.deploy.deployMethod==="debug"){$("main").html(Mustache.render(viewTemplate,{}))}else{console.log("no such babe.deploy.deployMethod")}babe.submission.submit(babe)},CT:0,trials:1};return thanks}};function paramsChecker(config,view){if(config.trials===undefined||config.trials===""){throw new Error(errors.noTrials.concat(findFile(view)))}if(config.name===undefined||config.name===""){throw new Error(errors.noName.concat(findFile(view)))}}function checkTrialView(config,view){if(config.data===undefined||config.data===null){throw new Error(errors.noData.concat(findFile(view)))}if(config.data instanceof Array===false){throw new Error(errors.notAnArray.concat(findFile(view)))}if(config.trial_type===undefined||config.trial_type===""){throw new Error(errors.noTrialType.concat(findFile(view)))}}function findFile(view){return`\n\nThe problem is in ${view} view.`}